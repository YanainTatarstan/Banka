# 1.Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

def job_calc():
    hour = float(input('Введите количество выработанных часов : '))
    sum_h = float(input('Введите ставку за 1 час : '))
    prize = float(input('Введите размер премии - '))
    pay = hour * sum_h
    return pay + prize
print(f'Размер заработной платы сотрудника: {job_calc()}')

# 2.Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор. Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]. Результат: [12, 44, 4, 10, 78, 123].

itog_list = []
list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
for i in range(1, len(list)):
    if list[i] > list[i - 1]:
        (itog_list.append(list[i]))
print('Список чисел: ', list)
print('Элементы списка, значения которых больше предыдущего: ', itog_list)

itog_list = []
list = [int(i) for i in input('Введите кууучу чисел через пробел (можно без зпт): ').split()]
for i in range(1, len(list)):
    if list[i] > list[i - 1]:
        (itog_list.append(list[i]))
print('Список чисел: ', list)
print('Элементы списка, значения которых больше предыдущего: ', itog_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку. Подсказка: используйте функцию range() и генератор.

print = list = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]; ('Список чисел кратных 20 или 21 в пределах 20..240: ', list)

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор. Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]. Результат: [23, 1, 3, 10, 4, 11]

list_1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print('Исходные элементы списка:\n', list_1)
new_list = [i for i in list_1 if list_1.count(i) == 1]
print('Элементы списка, не имеющие повторений:\n', new_list)

# c использованием генератора

num = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
def elements(num):
    
    elem_n = set()
    for i in num:
        if i not in elem_n:
            elem_n.add(i)
        else:
            elem_n.remove(i)
    for i in num:
        if i in elem_n:
            yield i
            elem_n.remove(i)
list(elements(num))

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка. Подсказка: использовать функцию reduce().

from functools import reduce
all_l = [i for i in range(100, 1001, 2)]
print('Список чётных чисел в диапазоне [100..1000]: ', all_l, end='')
all_max = ('Произведение всех элементов списка: ', reduce(lambda x, y: x * y, all_l))
all_max

# 6. Реализовать два небольших скрипта: итератор, генерирующий целые числа, начиная с указанного; итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import count

print('<<Итератор целых чисел до 10>>')
n = int(input('Введите целое число: '))
for i in count(n):
    if i > 10:
        break
    print(i, end=' ')

# второй

from itertools import cycle

n = input('Какое слово/число хотите повторять? - ').split(' ')
count = 1
for i in cycle(n):
    if count > 10:
        break
    print(i)
    count += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!. Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def factor(n):

    factorial = 1
    for i in range(1, n + 1):
        yield i
        factorial *= i
        print(f'{i}! = {factorial}', end = '')
fact = factor(eval(input('Факториал какого числа считаем? ')))
for el in fact:
    print('')
