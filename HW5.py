#1. Создать программный файл в текстовом формате, записать в него построчно данные, вводимые пользователем. Об окончании ввода данных будет свидетельствовать пустая строка.

file = open('1_Looooog','w', encoding='utf-8')

while True:
    text = input('Введите необходимые данные: ')
    if text == '': 
        break
    file.write(text+'\n')
file.close()

#2. Создать текстовый файл (не программно), сохранить в нём несколько строк, выполнить подсчёт строк и слов в каждой строке.

with open('1_Looooog', 'r', encoding='utf-8') as file:
    all_f = file.readlines()
    num = len(all_f)
    print(f"Количество строк в файле: {num}")
    for i in range(num):
        print(f"{i + 1} строка (кол-во слов): {len(all_f[i].split(' '))} ")
        print(all_f[i].split())

#3. Создать текстовый файл (не программно). Построчно записать фамилии сотрудников и величину их окладов (не менее 10 строк). Определить, кто из сотрудников имеет оклад менее 20 тысяч, вывести фамилии этих сотрудников. Выполнить подсчёт средней величины дохода сотрудников.
#Пример файла: Иванов 23543.12  Петров 13749.32

with open('3_ZP_rab', 'r', encoding='utf-8') as f:
    workers = {}
    
    for i in f:
        key, value = i.split()
        workers[key] = value
        if float(value) < 20000:
            print(f'Зарплата меньше 20000: {key}')

with open('3_ZP_rab', 'r', encoding='utf-8') as f:
    value = f.readlines()       
    average = sum([float(s.split(' ')[1]) for s in value]) / len([s.split(' ')[1] for s in value])
    print(f'Средний доход всех сотрудников: {average}')

#4. Создать (не программно) текстовый файл со следующим содержимым: One — 1, Two — 2, Three — 3, Four — 4
#Напишите программу, открывающую файл на чтение и считывающую построчно данные. При этом английские числительные должны заменяться на русские. Новый блок строк должен записываться в новый текстовый файл.

translate = {'One': 'Один', 'Two': 'Два', 'Three': 'Три', 'Four': 'Четыре'}
k = []

with open('4_one_two_3', 'r', encoding='utf-8') as file:
    all_f = file.readlines()
    for i in all_f:
        i = i.split(' ', 1)
        k.append(translate[i[0]] + ' ' + i[1])
    
with open('4_one_two_4', 'w', encoding='utf-8') as file:
    
    file.writelines(k)
    
with open('4_one_two_4', 'r', encoding='utf-8') as f:
    print(f.read())

#5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделённых пробелами. Программа должна подсчитывать сумму чисел в файле и выводить её на экран.

choto = input('Введите название нового файла: ')
file = open(choto,'w')
text = input('Введите числа через пробел: ')
file.write(text+'\n')
file.close()

with open(choto, 'r') as f:
    print(sum(map(float, f.read().split(' '))))

#6. Сформировать (не программно) текстовый файл. В нём каждая строка должна описывать учебный предмет и наличие лекционных, практических и лабораторных занятий по предмету. Сюда должно входить и количество занятий. Необязательно, чтобы для каждого предмета были все типы занятий.
#Сформировать словарь, содержащий название предмета и общее количество занятий по нему. Вывести его на экран.
#Примеры строк файла: Информатика: 100(л) 50(пр) 20(лаб). Физика: 30(л) — 10(лаб), Физкультура: — 30(пр) — Пример словаря: {“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}

dict_ = {}

with open('Ucheba', 'r', encoding='utf-8') as f:
    subject = ''
    for i in f.readlines():
        subject = i.split()[0]
        num = ''
        summ = 0
        for el in i:
            if el.isdigit():
                num += el
            if num != '' and not el.isdigit():
                summ += int(num)
                num = ''
        dict_[subject] = summ
        
print(dict_)

#7. Создать вручную и заполнить несколькими строками текстовый файл, в котором каждая строка будет содержать данные о фирме: название, форма собственности, выручка, издержки.
#Пример строки файла: firm_1 ООО 10000 5000. Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. Если фирма получила убытки, в расчёт средней прибыли её не включать.
#Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со средней прибылью. Если фирма получила убытки, также добавить её в словарь (со значением убытков).
#Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}]. Итоговый список сохранить в виде json-объекта в соответствующий файл.
#Пример json-объекта: [{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]. Подсказка: использовать менеджер контекста.
